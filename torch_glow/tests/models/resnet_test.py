from __future__ import absolute_import, division, print_function, unicode_literals

import torch
import torchvision

import unittest
import torch_glow

from tests.utils import jitVsGlow


class TestResnet(unittest.TestCase):
    def test_quantized_resnet18(self):
        """Basic test of the PyTorch quantized resnet on Glow."""

        torch._C._jit_set_profiling_executor(False)
        torch._C._jit_set_profiling_mode(False)

        # model could be:
        # torchvision.models.quantization.resnet18
        # torchvision.models.quantization.resnet50
        # torchvision.models.quantization.resnext101_32x8d
        model = torchvision.models.quantization.resnet18(pretrained=True,
                                                         quantize=True)

        model.qconfig = torch.quantization.get_default_qconfig('fbgemm')

        # x could be generated by tests.utils.get_image(),
        # by torchvision.dataset or by totally random torch.randn(1,3,224,224).
        # For stability and efficiency of unit test,
        # we use determined random generated inputs
        torch.manual_seed(0)
        x = torch.randn(1, 3, 224, 224)

        torch_answer = model(x).topk(3)

        with torch.no_grad():
            torch_glow.enableFusionPass()

            traced_model = torch.jit.trace(model, x)
            traced_model.eval()

            glow_answer = traced_model(x).topk(3)
            # compare the result's indices
            assert torch.allclose(torch_answer.indices, glow_answer.indices)
